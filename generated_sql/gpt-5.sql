--  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-- Total statements: 23
-- Successfully parsed: 18
-- Parse errors: 5
-- Executed: 8
-- Execution errors: 10
-- Parse success rate: 78.3%
-- Execution success rate (of parsed): 44.4%
-- Overall success rate: 34.8%

-- =========================
-- Schema (GoogleSQL / Spanner)
-- =========================

CREATE TABLE IF NOT EXISTS departments (
  dept_id   INT64 NOT NULL
            GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE),
  dept_name STRING(50) NOT NULL,
  location  STRING(100),
  created_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP()),
  PRIMARY KEY (dept_id)
);

CREATE TABLE IF NOT EXISTS employees (
  emp_id     INT64 NOT NULL
             GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE),
  first_name STRING(50) NOT NULL,
  last_name  STRING(50) NOT NULL,
  email      STRING(150),
  hire_date  DATE NOT NULL,
  salary     NUMERIC,
  dept_id    INT64,
  manager_id INT64,
  phone_number STRING(20),
  PRIMARY KEY (emp_id),
  CONSTRAINT fk_emp_dept
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ENFORCED,
  CONSTRAINT fk_emp_manager
    FOREIGN KEY (manager_id) REFERENCES employees(emp_id) ENFORCED
);

-- Unique index for email
CREATE UNIQUE INDEX IF NOT EXISTS idx_emp_email ON employees(email);

CREATE TABLE IF NOT EXISTS projects (
  project_id   INT64 NOT NULL
               GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE),
  project_name STRING(100) NOT NULL,
  start_date   DATE,
  end_date     DATE,
  budget       NUMERIC,
  status       STRING(20) DEFAULT 'ACTIVE',
  PRIMARY KEY (project_id),
  CONSTRAINT check_dates CHECK (end_date > start_date) ENFORCED,
  CONSTRAINT check_status CHECK (status IN ('ACTIVE', 'COMPLETED', 'ON_HOLD', 'CANCELLED')) ENFORCED
);

CREATE TABLE IF NOT EXISTS project_assignments (
  emp_id          INT64 NOT NULL,
  project_id      INT64 NOT NULL,
  role            STRING(50),
  hours_allocated INT64,
  PRIMARY KEY (emp_id, project_id),
  CONSTRAINT fk_pa_emp
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id) ENFORCED,
  CONSTRAINT fk_pa_project
    FOREIGN KEY (project_id) REFERENCES projects(project_id) ENFORCED
);

-- Secondary indexes
CREATE INDEX IF NOT EXISTS idx_emp_name ON employees(last_name, first_name);
CREATE INDEX IF NOT EXISTS idx_dept_location ON departments(location);
CREATE INDEX IF NOT EXISTS idx_project_status ON projects(status);

-- View (Spanner requires SQL SECURITY)
CREATE OR REPLACE VIEW employee_details
SQL SECURITY INVOKER AS
SELECT 
  e.emp_id,
  e.first_name,
  e.last_name,
  e.email,
  d.dept_name,
  m.first_name AS manager_first_name,
  m.last_name  AS manager_last_name
FROM employees e
LEFT JOIN departments d ON e.dept_id  = d.dept_id
LEFT JOIN employees  m  ON e.manager_id = m.emp_id;

-- =========================
-- DML with parameters + THEN RETURN
-- =========================

-- Insert department, return generated key
INSERT INTO departments (dept_name, location)
VALUES (@dept_name, @location)
THEN RETURN dept_id;

-- Insert employee, return generated key
INSERT INTO employees (first_name, last_name, email, hire_date, salary, dept_id)
VALUES (@first_name, @last_name, @email, @hire_date, @salary, @dept_id)
THEN RETURN emp_id;

-- Insert project, return generated key
INSERT INTO projects (project_name, start_date, end_date, budget, status)
VALUES (@project_name, @start_date, @end_date, @budget, @status)
THEN RETURN project_id;

-- Insert assignment (composite PK supplied)
INSERT INTO project_assignments (emp_id, project_id, role, hours_allocated)
VALUES (@emp_id, @project_id, @role, @hours_allocated);

-- =========================
-- Equivalent SELECT
-- =========================
SELECT e.emp_id, e.first_name, e.last_name, e.email, d.dept_name, 
       m.first_name AS manager_first_name, m.last_name AS manager_last_name,
       p.project_name
FROM employees e
LEFT JOIN departments d       ON e.dept_id = d.dept_id
LEFT JOIN employees  m        ON e.manager_id = m.emp_id
LEFT JOIN project_assignments pa ON e.emp_id = pa.emp_id
LEFT JOIN projects p          ON pa.project_id = p.project_id;

-- =========================
-- Tear-down (order matters for FKs)
-- =========================
DROP VIEW IF EXISTS employee_details;

DROP INDEX IF EXISTS idx_project_status;
DROP INDEX IF EXISTS idx_dept_location;
DROP INDEX IF EXISTS idx_emp_name;
DROP INDEX IF EXISTS idx_emp_email;

DROP TABLE IF EXISTS project_assignments;
DROP TABLE IF EXISTS projects;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS departments;
