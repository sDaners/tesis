-- 1) SCHEMA DEFINITION

CREATE TABLE IF NOT EXISTS Departments (
  dept_id    INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  dept_name  STRING(50)  NOT NULL,
  location   STRING(100),
  created_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP()
);  -- SERIAL → IDENTITY; VARCHAR → STRING; TIMESTAMPTZ → TIMESTAMP :contentReference[oaicite:4]{index=4}

CREATE TABLE IF NOT EXISTS Employees (
  emp_id       INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name   STRING(50)  NOT NULL,
  last_name    STRING(50)  NOT NULL,
  email        STRING(150),
  hire_date    DATE       NOT NULL,
  salary       NUMERIC,
  dept_id      INT64,
  manager_id   INT64,
  phone_number STRING(20),
  FOREIGN KEY (dept_id)    REFERENCES Departments(dept_id),
  FOREIGN KEY (manager_id) REFERENCES Employees(emp_id)
);  -- SERIAL → IDENTITY; FOREIGN KEY supported inline :contentReference[oaicite:5]{index=5}

CREATE UNIQUE INDEX IF NOT EXISTS idx_emp_email
  ON Employees(email);  -- unique index on email :contentReference[oaicite:6]{index=6}

CREATE TABLE IF NOT EXISTS Projects (
  project_id   INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_name STRING(100) NOT NULL,
  start_date   DATE,
  end_date     DATE,
  budget       NUMERIC,
  status       STRING(20)  NOT NULL DEFAULT 'ACTIVE',
  CONSTRAINT check_dates  CHECK (end_date > start_date),
  CONSTRAINT check_status CHECK (status IN ('ACTIVE','COMPLETED','ON_HOLD','CANCELLED'))
);  -- SERIAL → IDENTITY; CHECK constraints supported :contentReference[oaicite:7]{index=7}

CREATE TABLE IF NOT EXISTS ProjectAssignments (
  emp_id          INT64    NOT NULL,
  project_id      INT64    NOT NULL,
  role            STRING(50),
  hours_allocated INT64,
  PRIMARY KEY (emp_id, project_id),
  FOREIGN KEY (emp_id)       REFERENCES Employees(emp_id),
  FOREIGN KEY (project_id)   REFERENCES Projects(project_id)
);  -- composite PK, INT64 for integers :contentReference[oaicite:8]{index=8}

CREATE INDEX IF NOT EXISTS idx_emp_name
  ON Employees(last_name, first_name);

CREATE INDEX IF NOT EXISTS idx_dept_location
  ON Departments(location);

CREATE INDEX IF NOT EXISTS idx_project_status
  ON Projects(status);  -- secondary indexes :contentReference[oaicite:9]{index=9}

-- 2) VIEW DEFINITION

CREATE OR REPLACE VIEW employee_details
  SQL SECURITY INVOKER AS
SELECT
  e.emp_id              AS emp_id,
  e.first_name          AS first_name,
  e.last_name           AS last_name,
  e.email               AS email,
  d.dept_name           AS dept_name,
  m.first_name          AS manager_first_name,
  m.last_name           AS manager_last_name
FROM Employees AS e
LEFT JOIN Departments AS d ON e.dept_id = d.dept_id
LEFT JOIN Employees   AS m ON e.manager_id = m.emp_id;
-- strict name resolution with SQL SECURITY INVOKER :contentReference[oaicite:10]{index=10}

-- 3) DML (with RETURNING → THEN RETURN)

INSERT INTO Departments (dept_name, location)
VALUES ($1, $2)
THEN RETURN dept_id;  -- DML RETURNING :contentReference[oaicite:11]{index=11}

INSERT INTO Employees (first_name, last_name, email, hire_date, salary, dept_id)
VALUES ($1, $2, $3, $4, $5, $6)
THEN RETURN emp_id;  -- DML RETURNING :contentReference[oaicite:12]{index=12}

INSERT INTO Projects (project_name, start_date, end_date, budget, status)
VALUES ($1, $2, $3, $4, $5)
THEN RETURN project_id;  -- DML RETURNING :contentReference[oaicite:13]{index=13}

INSERT INTO ProjectAssignments (emp_id, project_id, role, hours_allocated)
VALUES ($1, $2, $3, $4);

-- 4) COMPLEX SELECT

SELECT
  e.emp_id,
  e.first_name,
  e.last_name,
  e.email,
  d.dept_name,
  m.first_name        AS manager_first_name,
  m.last_name         AS manager_last_name,
  p.project_name
FROM Employees AS e
LEFT JOIN Departments       AS d  ON e.dept_id    = d.dept_id
LEFT JOIN Employees         AS m  ON e.manager_id = m.emp_id
LEFT JOIN ProjectAssignments AS pa ON e.emp_id     = pa.emp_id
LEFT JOIN Projects            AS p  ON pa.project_id= p.project_id;

-- 5) CLEANUP

DROP VIEW employee_details;

DROP INDEX IF EXISTS idx_project_status;
DROP INDEX IF EXISTS idx_dept_location;
DROP INDEX IF EXISTS idx_emp_name;
DROP INDEX IF EXISTS idx_emp_email;

DROP TABLE IF EXISTS ProjectAssignments;
DROP TABLE IF EXISTS Projects;
DROP TABLE IF EXISTS Employees;
DROP TABLE IF EXISTS Departments;
