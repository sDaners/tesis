--  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-- Total statements: 23
-- Successfully parsed: 23
-- Parse errors: 0
-- Executed: 21
-- Execution errors: 2
-- Parse success rate: 100.0%
-- Execution success rate (of parsed): 91.3%
-- Overall success rate: 91.3%

-- 1) SCHEMA DEFINITION

CREATE TABLE Departments (
  dept_id    INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
  dept_name  STRING(50)  NOT NULL,
  location   STRING(100),
  created_at TIMESTAMP    NOT NULL DEFAULT (CURRENT_TIMESTAMP())
);

CREATE TABLE Employees (
  emp_id       INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
  first_name   STRING(50)  NOT NULL,
  last_name    STRING(50)  NOT NULL,
  email        STRING(150),
  hire_date    DATE       NOT NULL,
  salary       NUMERIC,
  dept_id      INT64,
  manager_id   INT64,
  phone_number STRING(20),
  FOREIGN KEY (dept_id)    REFERENCES Departments(dept_id),
  FOREIGN KEY (manager_id) REFERENCES Employees(emp_id)
);

CREATE UNIQUE INDEX idx_emp_email
  ON Employees(email);

CREATE TABLE Projects (
  project_id   INT64    NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
  project_name STRING(100) NOT NULL,
  start_date   DATE,
  end_date     DATE,
  budget       NUMERIC,
  status       STRING(20)  NOT NULL DEFAULT ('ACTIVE'),
  CONSTRAINT check_dates  CHECK (end_date > start_date),
  CONSTRAINT check_status CHECK (status IN ('ACTIVE','COMPLETED','ON_HOLD','CANCELLED'))
);

CREATE TABLE ProjectAssignments (
  emp_id          INT64    NOT NULL,
  project_id      INT64    NOT NULL,
  role            STRING(50),
  hours_allocated INT64,
  FOREIGN KEY (emp_id)       REFERENCES Employees(emp_id),
  FOREIGN KEY (project_id)   REFERENCES Projects(project_id)  
) PRIMARY KEY (emp_id, project_id);

CREATE INDEX idx_emp_name
  ON Employees(last_name, first_name);

CREATE INDEX idx_dept_location
  ON Departments(location);

CREATE INDEX idx_project_status
  ON Projects(status);

-- 2) VIEW DEFINITION

CREATE OR REPLACE VIEW employee_details
  SQL SECURITY INVOKER AS
SELECT
  e.emp_id              AS emp_id,
  e.first_name          AS first_name,
  e.last_name           AS last_name,
  e.email               AS email,
  d.dept_name           AS dept_name,
  m.first_name          AS manager_first_name,
  m.last_name           AS manager_last_name
FROM Employees AS e
LEFT JOIN Departments AS d ON e.dept_id = d.dept_id
LEFT JOIN Employees   AS m ON e.manager_id = m.emp_id;

-- 3) DML (with RETURNING â†’ THEN RETURN)

INSERT INTO Departments (dept_name, location)
VALUES (@dept_name, @location)
THEN RETURN dept_id;

INSERT INTO Employees (first_name, last_name, email, hire_date, salary, dept_id)
VALUES (@first_name, @last_name, @email, @hire_date, @salary, @dept_id)
THEN RETURN emp_id;

INSERT INTO Projects (project_name, start_date, end_date, budget, status)
VALUES (@project_name, @start_date, @end_date, @budget, @status)
THEN RETURN project_id;

INSERT INTO ProjectAssignments (emp_id, project_id, role, hours_allocated)
VALUES (@emp_id, @project_id, @role, @hours_allocated);

-- 4) COMPLEX SELECT

SELECT
  e.emp_id,
  e.first_name,
  e.last_name,
  e.email,
  d.dept_name,
  m.first_name        AS manager_first_name,
  m.last_name         AS manager_last_name,
  p.project_name
FROM Employees AS e
LEFT JOIN Departments       AS d  ON e.dept_id    = d.dept_id
LEFT JOIN Employees         AS m  ON e.manager_id = m.emp_id
LEFT JOIN ProjectAssignments AS pa ON e.emp_id     = pa.emp_id
LEFT JOIN Projects            AS p  ON pa.project_id= p.project_id;

-- 5) CLEANUP

DROP VIEW employee_details;

DROP INDEX  idx_project_status;
DROP INDEX  idx_dept_location;
DROP INDEX  idx_emp_name;
DROP INDEX  idx_emp_email;

DROP TABLE  ProjectAssignments;
DROP TABLE  Projects;
DROP TABLE  Employees;
DROP TABLE  Departments; 