package repo

// SpannerDDL contains all the table creation statements for the Spanner database.
// It creates the following structure:
// - departments: Stores department information
// - employees: Stores employee information with references to departments and managers
// - projects: Stores project information with status and date constraints
// - project_assignments: Links employees to projects with their roles
// Also creates necessary indexes and a view for employee details.
var SpannerDDL = []string{
	`CREATE TABLE IF NOT EXISTS Departments (
        dept_id     INT64 NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
        dept_name  STRING(50)  NOT NULL,
        location   STRING(100),
        created_at TIMESTAMP    NOT NULL DEFAULT (CURRENT_TIMESTAMP())
      )`,

	`CREATE TABLE IF NOT EXISTS Employees (
        emp_id        INT64 NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
        first_name   STRING(50)  NOT NULL,
        last_name    STRING(50)  NOT NULL,
        email        STRING(150),
        hire_date    DATE       NOT NULL,
        salary       NUMERIC,
        dept_id      INT64,
        manager_id   INT64,
        phone_number STRING(20),
        FOREIGN KEY (dept_id)    REFERENCES Departments(dept_id),
        FOREIGN KEY (manager_id) REFERENCES Employees(emp_id)
      )`,

	`CREATE UNIQUE INDEX IF NOT EXISTS idx_emp_email
  ON Employees(email)`,

	`CREATE TABLE IF NOT EXISTS Projects (
        project_id    INT64 NOT NULL GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE) PRIMARY KEY,
        project_name STRING(100) NOT NULL,
        start_date   DATE,
        end_date     DATE,
        budget       NUMERIC,
        status       STRING(20)  NOT NULL DEFAULT 'ACTIVE',
        CONSTRAINT check_dates  CHECK (end_date > start_date),
        CONSTRAINT check_status CHECK (status IN ('ACTIVE','COMPLETED','ON_HOLD','CANCELLED'))
      );`,

	`CREATE TABLE IF NOT EXISTS ProjectAssignments (
        emp_id          INT64    NOT NULL,
        project_id      INT64    NOT NULL,
        role            STRING(50),
        hours_allocated INT64,
        PRIMARY KEY (emp_id, project_id),
        FOREIGN KEY (emp_id)       REFERENCES Employees(emp_id),
        FOREIGN KEY (project_id)   REFERENCES Projects(project_id)
      )`,

	`CREATE INDEX IF NOT EXISTS idx_emp_name
  ON Employees(last_name, first_name)`,
	`CREATE INDEX IF NOT EXISTS idx_dept_location
  ON Departments(location)`,
	`CREATE INDEX IF NOT EXISTS idx_project_status
  ON Projects(status)`,

	`
CREATE OR REPLACE VIEW employee_details
  SQL SECURITY INVOKER AS
SELECT
  e.emp_id              AS emp_id,
  e.first_name          AS first_name,
  e.last_name           AS last_name,
  e.email               AS email,
  d.dept_name           AS dept_name,
  m.first_name          AS manager_first_name,
  m.last_name           AS manager_last_name
FROM Employees AS e
LEFT JOIN Departments AS d ON e.dept_id = d.dept_id
LEFT JOIN Employees   AS m ON e.manager_id = m.emp_id
    `,
}

// SpannerInsertDepartmentSQL inserts a new department and returns its ID.
// Parameters:
//   - @dept_name: Name of the department
//   - @location: Location of the department
//
// Returns: The generated department ID
const SpannerInsertDepartmentSQL = `
INSERT INTO Departments (dept_name, location)
VALUES ($1, $2)
THEN RETURN dept_id`

// SpannerInsertEmployeeSQL inserts a new employee and returns their ID.
// Parameters:
//   - @first_name: Employee's first name
//   - @last_name: Employee's last name
//   - @email: Employee's email address
//   - @hire_date: Employee's hire date
//   - @salary: Employee's salary
//   - @dept_id: ID of the department the employee belongs to
//
// Returns: The generated employee ID
const SpannerInsertEmployeeSQL = `
INSERT INTO Employees (first_name, last_name, email, hire_date, salary, dept_id)
VALUES ($1, $2, $3, $4, $5, $6)
THEN RETURN emp_id`

// SpannerInsertProjectSQL inserts a new project and returns its ID.
// Parameters:
//   - @project_name: Name of the project
//   - @start_date: Project start date
//   - @end_date: Project end date
//   - @budget: Project budget
//   - @status: Project status (must be one of: 'ACTIVE', 'COMPLETED', 'ON_HOLD', 'CANCELLED')
//
// Returns: The generated project ID
const SpannerInsertProjectSQL = `
INSERT INTO Projects (project_name, start_date, end_date, budget, status)
VALUES ($1, $2, $3, $4, $5)
THEN RETURN project_id`

// SpannerInsertProjectAssignmentSQL assigns an employee to a project with a specific role.
// Parameters:
//   - @emp_id: ID of the employee
//   - @project_id: ID of the project
//   - @role: Role of the employee in the project
//   - @hours: Number of hours allocated to the project
const SpannerInsertProjectAssignmentSQL = `
INSERT INTO ProjectAssignments (emp_id, project_id, role, hours_allocated)
VALUES ($1, $2, $3, $4)`

// SpannerQueryEmployeeDetailsSQL retrieves detailed information about employees including:
// - Basic employee information (ID, name, email)
// - Department information
// - Manager information
// - Project information
// The query joins multiple tables to provide a comprehensive view of each employee's details.
const SpannerQueryEmployeeDetailsSQL = `
SELECT
  e.emp_id,
  e.first_name,
  e.last_name,
  e.email,
  d.dept_name,
  m.first_name        AS manager_first_name,
  m.last_name         AS manager_last_name,
  p.project_name
FROM Employees AS e
LEFT JOIN Departments       AS d  ON e.dept_id    = d.dept_id
LEFT JOIN Employees         AS m  ON e.manager_id = m.emp_id
LEFT JOIN ProjectAssignments AS pa ON e.emp_id     = pa.emp_id
LEFT JOIN Projects            AS p  ON pa.project_id= p.project_id
`

// SpannerCleanupStatements contains the SQL statements to clean up the database.
// The statements are ordered to respect dependencies:
// 1. Drop views
// 2. Drop indexes
// 3. Drop tables in reverse order of their dependencies
var SpannerCleanupStatements = []string{
	"DROP VIEW IF EXISTS employee_details",
	"DROP INDEX IF EXISTS idx_project_status",
	"DROP INDEX IF EXISTS idx_dept_location",
	"DROP INDEX IF EXISTS idx_emp_name",
	"DROP INDEX IF EXISTS idx_emp_email",
	"DROP TABLE IF EXISTS ProjectAssignments",
	"DROP TABLE IF EXISTS Projects",
	"DROP TABLE IF EXISTS Employees",
	"DROP TABLE IF EXISTS Departments",
}
